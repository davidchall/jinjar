[{"path":"https://davidchall.github.io/jinjar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 jinjar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://davidchall.github.io/jinjar/articles/auxiliary-templates.html","id":"loading-auxiliary-templates","dir":"Articles","previous_headings":"","what":"Loading Auxiliary Templates","title":"Auxiliary Templates","text":"main template makes reference auxiliary templates, ’ll need specify templating engine can find auxiliary templates. achieved using template loader (see help(\"loader\")). different types loader, path_loader() commonly used. allows specify directory auxiliary templates stored files. Imagine main template uses nested template inheritance (content inherits blog_post.html, turns inherits base.html). might store two auxiliary templates templates directory: rendering main template, create loader object part engine configuration:","code":"/path/to/templates/ |-- base.html |-- blog_post.html config <- jinjar_config(loader = path_loader(\"path\", \"to\", \"templates\")) output <- render(content, !!!data, .config = config)"},{"path":"https://davidchall.github.io/jinjar/articles/auxiliary-templates.html","id":"include","dir":"Articles","previous_headings":"","what":"Template Inclusion","title":"Auxiliary Templates","text":"include tag can used include auxiliary template return rendered contents file main document. Included templates access variables main template. default, error raised included template found. can ignore errors setting ignore_missing_files argument jinjar_config(). example, create auxiliary file header.html contents: auxiliary file footer.html contents: main template rendered :","code":"<!DOCTYPE html> <html lang=\"en\"> <head>     <title>My webpage<\/title> <\/head> <\/html> {% include \"header.html\" %} <body> Body <\/body> {% include \"footer.html\" %} <!DOCTYPE html> <html lang=\"en\"> <head>     <title>My webpage<\/title> <\/head>  <body> Body <\/body> <\/html>"},{"path":"https://davidchall.github.io/jinjar/articles/auxiliary-templates.html","id":"extends","dir":"Articles","previous_headings":"","what":"Template Inheritance","title":"Auxiliary Templates","text":"Template inheritance allows build base “skeleton” template contains common elements document defines blocks child templates can override. powerful technique. example, consider following base template stored base.html: base template declares three {% block %} tags child templates can fill : head, title content. Note base template defines content head block – ’ll show child template can use . child template uses {% extends %} tag declare parent template builds upon. first tag child template, templating engine knows must locate parent template rendering. Building upon base template example , child template might look like : child template defines three blocks declared parent template: head, title content. case head block, uses {{ super() }} render contents head block defined parent template. using nested extends tags, pass argument skip levels inheritance tree (e.g. {{ super(2) }}).","code":"<!DOCTYPE html> <html> <head>   {% block head -%}   <link rel=\"stylesheet\" href=\"style.css\" />   <title>{% block title %}{% endblock %} - My Webpage<\/title>   {% endblock %} <\/head> <body>   <div id=\"content\">{% block content %}{% endblock %}<\/div> <\/body> <\/html> {% extends \"base.html\" %} {% block title %}Index{% endblock %} {% block head %}   {{ super() }}   <style type=\"text/css\">     .important { color: #336699; }   <\/style> {% endblock %} {% block content %}   <h1>Index<\/h1>   <p class=\"important\">     Welcome to my blog!   <\/p> {% endblock %} <!DOCTYPE html> <html> <head>      <link rel=\"stylesheet\" href=\"style.css\" />   <title>Index - My Webpage<\/title>      <style type=\"text/css\">     .important { color: #336699; }   <\/style>  <\/head> <body>   <div id=\"content\">   <h1>Index<\/h1>   <p class=\"important\">     Welcome to my blog!   <\/p> <\/div> <\/body> <\/html>"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"synopsis","dir":"Articles","previous_headings":"","what":"Synopsis","title":"Template Syntax","text":"jinjar template simply text file, rendered output also text file (e.g. HTML, SQL, LaTeX). template contains variables /expressions, get replaced values template rendered; tags, control logic template. minimal template illustrates basics using default jinjar configuration. cover details later document: following example shows default configuration settings, can adjust syntax configuration desired using jinjar_config(). kinds delimiters. default delimiters configured follows: {% ... %} Statements {{ ... }} Expressions print template output {# ... #} Comments included template output Line Statements also possible, though don’t default prefix characters. use , set line_statement creating jinjar_config().","code":"<!DOCTYPE html> <html lang=\"en\"> <head>     <title>{{ title }}<\/title> <\/head> <body>     <ul id=\"navigation\">     {% for item in navigation -%}         <li><a href=\"{{ item.href }}\">{{ item.caption }}<\/a><\/li>     {% endfor -%}     <\/ul>     {# a comment #} <\/body> <\/html> <!DOCTYPE html> <html lang=\"en\"> <head>     <title>My Webpage<\/title> <\/head> <body>     <ul id=\"navigation\">     <li><a href=\"index.html\">Home<\/a><\/li>     <li><a href=\"blog.html\">Blog<\/a><\/li>     <\/ul>      <\/body> <\/html>"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"variables","dir":"Articles","previous_headings":"","what":"Variables","title":"Template Syntax","text":"writing template, refer variables act data placeholders. define values rendering template. Although pass R objects render(), helpful understand encoded JSON objects template rendered. can use dot (.) notation access data nested within variable. array element accessed numeric zero-based index (e.g. foo.1) object value accessed key (e.g. foo.bar). Note: R, dot valid character object name (e.g. .data). However, causes ambiguity accessing nested data values. reason, dot replaced underscore data encoded JSON (e.g. .data becomes my_data). Note: R, scalar indistinguishable length-1 vector. creates ambiguity passing R data template, template variables support scalars arrays. can explicitly pass length-1 vector array using () operator (see help(\"render\")). double-brace syntax used print value variable (e.g. {{ foo }}). use variable contexts (e.g. control structures), braces omitted (e.g. {% bar foo %}). template variable defined, error occurs. However, can use default(foo, bar) function specify fallback value.","code":""},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"comments","dir":"Articles","previous_headings":"","what":"Comments","title":"Template Syntax","text":"comment-lines, preventing appearing rendered document, use comment syntax (default: {# ... #}). useful debugging documenting template.","code":"Hello{# TODO: update this #}! Hello!"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"whitespace","dir":"Articles","previous_headings":"","what":"Whitespace Control","title":"Template Syntax","text":"default configuration, whitespace (e.g. spaces, tabs, newlines) left unchanged rendered output. example, default configuration get: setting trim_blocks = TRUE creating jinjar_config(), first newline control block automatically removed. Setting lstrip_blocks = TRUE removes whitespace beginning line start block. options enabled, example becomes: Instead changing global configuration, can manually trim whitespace finegrained level. putting minus sign (-) opening delimiter, removes whitespace beginning line start block (.e. lstrip_blocks feature). putting minus sign (-) closing delimiter, removes whitespace (including newlines) next non-whitespace character (.e. slightly different trim_blocks feature). can activated control blocks, comments, variable expressions:","code":"<div>     {% if true %}         yay     {% endif %} <\/div> <div>              yay      <\/div> <div>     {% if true %}         yay     {% endif %} <\/div> <div>         yay <\/div> <div>     {% if true -%}         yay     {%- endif -%} <\/div> <div>     yay <\/div>"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"line-statements","dir":"Articles","previous_headings":"","what":"Line Statements","title":"Template Syntax","text":"line statements enabled (see jinjar_config()), ’s possible mark line statement. example, line statement prefix configured #, can :","code":"<ul id=\"navigation\"> # for item in navigation     <li><a href=\"{{ item.href }}\">{{ item.caption }}<\/a><\/li> # endfor <\/ul> <ul id=\"navigation\">     <li><a href=\"index.html\">Home<\/a><\/li>     <li><a href=\"blog.html\">Blog<\/a><\/li> <\/ul>"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"control-structures","dir":"Articles","previous_headings":"","what":"Control Structures","title":"Template Syntax","text":"control structure refers things control flow program. default syntax, control structures appear inside {% ... %} blocks.","code":""},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"for","dir":"Articles","previous_headings":"Control Structures","what":"For","title":"Template Syntax","text":"-loop allows iterate element vector: loop key-value pairs named list: described Variables, data frame translated array JSON objects. Therefore nested combination two loops theoretically used. practice, much common iterate rows access individual elements attributes: inside -loop block, can access special variables:","code":"{% for user in users -%} {{ loop.index1 }}. {{ user }} {%- endfor -%} 1. User A 2. User B 3. User C <dl> {% for key, value in godzilla %}   <dt>{{ key }}<\/dt>   <dd>{{ value }}<\/dd> {% endfor -%} <\/dl> <dl>    <dt>Birthplace<\/dt>   <dd>Japan<\/dd>    <dt>Born<\/dt>   <dd>1952<\/dd>    <dt>Name<\/dt>   <dd>Godzilla<\/dd> <\/dl> <ul id=\"navigation\"> {% for item in navigation -%} <li><a href=\"{{ item.href }}\">{{ item.caption }}<\/a><\/li> {% endfor -%} <\/ul> <ul id=\"navigation\"> <li><a href=\"index.html\">Home<\/a><\/li> <li><a href=\"blog.html\">Blog<\/a><\/li> <\/ul>"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"if","dir":"Articles","previous_headings":"Control Structures","what":"If","title":"Template Syntax","text":"Conditional branches written using , else else statements, evaluate Expressions.","code":"{% if length(users) > 5 -%} {% for user in users -%} * {{ user }} {% endfor %} {% else if length(users) > 0 -%} {{ join(users, \", \") }}. {% else -%} No users found. {% endif %} User A, User B, User C."},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"assignments","dir":"Articles","previous_headings":"Control Structures","what":"Assignments","title":"Template Syntax","text":"Using set statement, can assign values variables.","code":"{% set name=\"world\" -%} Hello {{ name }}! Hello world!"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"extends","dir":"Articles","previous_headings":"Control Structures","what":"Extends","title":"Template Syntax","text":"extends tag can used template inheritance. See Template Inheritance vignette(\"auxiliary-templates\").","code":""},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"include","dir":"Articles","previous_headings":"Control Structures","what":"Include","title":"Template Syntax","text":"include tag inserts rendered contents auxiliary template. See Template Inclusion vignette(\"auxiliary-templates\").","code":""},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"expressions","dir":"Articles","previous_headings":"","what":"Expressions","title":"Template Syntax","text":"Basic expressions supported templates.","code":""},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"literals","dir":"Articles","previous_headings":"Expressions","what":"Literals","title":"Template Syntax","text":"simplest form expressions literals, represent fixed values. described Variables, template rendered using data stored JSON format. reason, literals must also specified JSON format. following types literals supported: Double quotation marks string value must escaped using backslash. Integer: whole numbers without decimal part. Specify decimal scientific format. Specify using lowercase characters. List: array values square brackets. Keys must string literals, values can literal type. NULL: missing data represented null. example usage type:","code":"String: {{ \"A string\" }} Integer: {{ 3 }} Numeric: {{ 3.14 }} or {{ 1.6e-19 }} Boolean: {{ true }} or {{ false }} List: {{ [1, 2, 3] }} Object: {{ {\"a\": 1, \"b\": 2} }} Null: {{ null }} String: A string Integer: 3 Numeric: 3.14 or 1.6e-19 Boolean: true or false List: [1,2,3] Object: {\"a\":1,\"b\":2} Null:"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"math","dir":"Articles","previous_headings":"Expressions","what":"Math","title":"Template Syntax","text":"can perform simple arithmetic using standard operators:","code":"1 + 1: {{ 1 + 1 }} 3 - 2: {{ 3 - 2 }} 2 * 2: {{ 2 * 2 }} 1 / 2: {{ 1 / 2 }} 2 ^ 3: {{ 2 ^ 3 }} 7 % 3: {{ 7 % 3 }} 1 + 1: 2 3 - 2: 1 2 * 2: 4 1 / 2: 0.5 2 ^ 3: 8 7 % 3: 1"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"comparisons","dir":"Articles","previous_headings":"Expressions","what":"Comparisons","title":"Template Syntax","text":"can perform comparisons:","code":"1 == 1: {{ 1 == 1 }} 1 != 1: {{ 1 != 1 }} 2 >  1: {{ 2 > 1 }} 2 >= 1: {{ 2 >= 1 }} 2 <  1: {{ 2 < 1 }} 2 <= 1: {{ 2 <= 1 }} 1 == 1: true 1 != 1: false 2 >  1: true 2 >= 1: true 2 <  1: false 2 <= 1: false"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"logic","dir":"Articles","previous_headings":"Expressions","what":"Logic","title":"Template Syntax","text":"Within expressions control structures, can use Boolean operators: , , . can also check value contained within list using :","code":"true and false: {{ true and false }} true or false: {{ true or false }} not false: {{ not false }} true and false: false true or false: true not false: true {{ 1 in [1, 2, 3] }} true"},{"path":[]},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"data-checks","dir":"Articles","previous_headings":"Functions","what":"Data Checks","title":"Template Syntax","text":"can check value exists passing variable name string: Similarly, can check value exists within JSON object, passing key string: Concisely handle missing values using default() function: can also check data type variable literal:","code":"users does exist: {{ exists(\"users\") }} abc doesn't exist: {{ exists(\"abc\") }} users does exist: true abc doesn't exist: false Birthplace does exist: {{ existsIn(godzilla, \"Birthplace\") }} Weight doesn't exist: {{ existsIn(godzilla, \"Weight\") }} Birthplace does exist: true Weight doesn't exist: false {{ default(godzilla.Weight, 20000) }} 20000 {{ isString(\"a string\") }} {{ isInteger(3) }} {{ isFloat(3.14) }} {{ isNumber(3) }} and {{ isNumber(3.14) }} {{ isBoolean(false) }} {{ isArray([1, 2, 3]) }} {{ isObject({\"a\": 1, \"b\": 2}) }} true true true true and true true true true"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"data-conversion","dir":"Articles","previous_headings":"Functions","what":"Data Conversion","title":"Template Syntax","text":"can convert strings numeric types, using int() float() functions:","code":"{{ int(\"2\") }} {{ float(\"2.5\") }} 2 2.5"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"html-escaping","dir":"Articles","previous_headings":"Functions","what":"HTML Escaping","title":"Template Syntax","text":"generating HTML templates, ’s always risk variable include characters affect resulting HTML. special characters : <, >, & \". jinjar, ’s responsibility manually escape variables, using escape_html() function. escape variables might contain special characters. variable trusted contain well-formed HTML, escaped (otherwise accidentally double-escape content).","code":"<input type=\"text\" value=\"{{ escape_html(name) }}\"> <input type=\"text\" value=\"Dwayne &quot;The Rock&quot; Johnson\">"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"sql-quoting","dir":"Articles","previous_headings":"Functions","what":"SQL Quoting","title":"Template Syntax","text":"SQL databases expect string literals wrapped single-quotes, types literals (e.g., numbers) quoted. cumbersome achieve writing template, quote_sql() function provides functionality. Important: quote_sql() provide protection SQL injection attacks. passed array, quote_sql() quote element return comma-separated list. particularly helpful using SQL operator.","code":"WHERE title = {{ quote_sql(title) }} AND year = {{ quote_sql(godzilla.Born) }} WHERE title = 'My Webpage' AND year = 1952 WHERE user IN ({{ quote_sql(users) }}) WHERE user IN ('User A', 'User B', 'User C')"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"numeric-data","dir":"Articles","previous_headings":"Functions","what":"Numeric Data","title":"Template Syntax","text":"can check integer even odd, divisible integer. used make alternating row colors. can round floating point numbers specific precision:","code":"{{ even(42) }} {{ odd(42) }} {{ divisibleBy(42, 7) }} true false true {{ round(3.1415, 0) }} {{ round(3.1415, 3) }} 3 3.142"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"string-data","dir":"Articles","previous_headings":"Functions","what":"String Data","title":"Template Syntax","text":"Translate string lower case upper case: Escape special characters use HTML content (see HTML Escaping): Quote string data use string literals SQL query (see SQL Quoting):","code":"{{ lower(\"Hello\") }} {{ upper(\"Hello\") }} hello HELLO <input type=\"text\" value=\"{{ escape_html(name) }}\"> <input type=\"text\" value=\"Dwayne &quot;The Rock&quot; Johnson\"> WHERE user IN ({{ quote_sql(users) }}) WHERE user IN ('User A', 'User B', 'User C')"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"json-lists","dir":"Articles","previous_headings":"Functions","what":"JSON Lists","title":"Template Syntax","text":"Get number list elements: Get first last elements: Get minimum maximum elements: Sort list ascending order: Join list separator: Generate list range integers: Access elements using dynamic index (). Note index zero-based.","code":"length(): {{ length([3,1,2]) }} length(): 3 first(): {{ first([3,1,2]) }} last():  {{ last([3,1,2]) }} first(): 3 last():  2 min(): {{ min([3,1,2]) }} max(): {{ max([3,1,2]) }} min(): 1 max(): 3 sort(): {{ sort([3,1,2]) }} sort(): [1,2,3] {{ join([1,2,3], \" + \") }} {{ join(users, \", \") }} 1 + 2 + 3 User A, User B, User C {% for i in range(4) %}{{ loop.index1 }}{% endfor %} 1234 {% set x = [1,2,3] -%} {% set i = 2 -%} {{ x.2 }} {{ at(x, i) }} 3 3"},{"path":"https://davidchall.github.io/jinjar/articles/template-syntax.html","id":"json-objects","dir":"Articles","previous_headings":"Functions","what":"JSON Objects","title":"Template Syntax","text":"Access values using dynamic key ():","code":"{% set x = {\"a\": 1, \"b\": 2} -%} {% set key = \"b\" -%} {{ x.b }} {{ at(x, key) }} 2 2"},{"path":"https://davidchall.github.io/jinjar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hall. Author, maintainer, copyright holder. Lars Berscheid. Copyright holder.            Author bundled inja library Niels Lohmann. Copyright holder.            Author bundled json library","code":""},{"path":"https://davidchall.github.io/jinjar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hall D (2023). jinjar: Template Engine Inspired 'Jinja'. R package version 0.3.0.9000,  https://github.com/davidchall/jinjar, https://davidchall.github.io/jinjar/.","code":"@Manual{,   title = {jinjar: Template Engine Inspired by 'Jinja'},   author = {David Hall},   year = {2023},   note = {R package version 0.3.0.9000,  https://github.com/davidchall/jinjar},   url = {https://davidchall.github.io/jinjar/}, }"},{"path":"https://davidchall.github.io/jinjar/index.html","id":"jinjar-","dir":"","previous_headings":"","what":"Template Engine Inspired by Jinja","title":"Template Engine Inspired by Jinja","text":"jinjar templating engine R, inspired Jinja Python package powered inja C++ library.","code":""},{"path":"https://davidchall.github.io/jinjar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Template Engine Inspired by Jinja","text":"can install released version jinjar CRAN : can install development version GitHub:","code":"install.packages(\"jinjar\") # install.packages(\"remotes\") remotes::install_github(\"davidchall/jinjar\")"},{"path":"https://davidchall.github.io/jinjar/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Template Engine Inspired by Jinja","text":"’s advanced example using loops conditional statements. full list supported syntax described vignette(\"template-syntax\").","code":"library(jinjar)  render(\"Hello {{ name }}!\", name = \"world\") #> [1] \"Hello world!\" template <- 'Humans of A New Hope  {% for person in people -%} {% if \"A New Hope\" in person.films and default(person.species, \"Unknown\") == \"Human\" -%} * {{ person.name }} ({{ person.homeworld }}) {% endif -%} {% endfor -%} '  template |>   render(people = dplyr::starwars) |>   writeLines() #> Humans of A New Hope #>  #> * Luke Skywalker (Tatooine) #> * Darth Vader (Tatooine) #> * Leia Organa (Alderaan) #> * Owen Lars (Tatooine) #> * Beru Whitesun lars (Tatooine) #> * Biggs Darklighter (Tatooine) #> * Obi-Wan Kenobi (Stewjon) #> * Wilhuff Tarkin (Eriadu) #> * Han Solo (Corellia) #> * Wedge Antilles (Corellia) #> * Jek Tono Porkins (Bestine IV) #> * Raymus Antilles (Alderaan)"},{"path":"https://davidchall.github.io/jinjar/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Template Engine Inspired by Jinja","text":"important characteristic templating engine much logic supported. spectrum ranges logic-less templates (.e. variable substitution supported) arbitrary code execution. Generally speaking, logic-less templates easier maintain functionality restricted. often data doesn’t align rendered – templating logic offers flexibility bridge gap. Fortunately, already popular R packages fall opposite ends spectrum: whisker – Implements Mustache templating syntax. nearly logic-less, though simple control flow supported. Mustache templates language agnostic (.e. can rendered Mustache implementations). knitr rmarkdown – Allows arbitrary code execution knitted together Markdown text content. even supports multiple language engines (e.g. R, Python, C++, SQL). contrast, jinjar strikes balance inspired Jinja Python package. supports complex logic whisker, without arbitrary code execution knitr.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/jinjar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jinjar: Template Engine Inspired by 'Jinja' — jinjar-package","title":"jinjar: Template Engine Inspired by 'Jinja' — jinjar-package","text":"Template engine powered 'inja' C++ library. Users write template document, using syntax inspired 'Jinja' Python package, render final document passing data R. template syntax supports features variables, loops, conditions inheritance.","code":""},{"path":[]},{"path":"https://davidchall.github.io/jinjar/reference/jinjar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jinjar: Template Engine Inspired by 'Jinja' — jinjar-package","text":"Maintainer: David Hall david.hall.physics@gmail.com (ORCID) [copyright holder] contributors: Lars Berscheid (Author bundled inja library) [copyright holder] Niels Lohmann (Author bundled json library) [copyright holder]","code":""},{"path":"https://davidchall.github.io/jinjar/reference/jinjar_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure the templating engine — jinjar_config","title":"Configure the templating engine — jinjar_config","text":"Create object configure templating engine behavior (e.g. customize syntax). default values chosen match Jinja defaults.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/jinjar_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure the templating engine — jinjar_config","text":"","code":"jinjar_config(   loader = NULL,   block_open = \"{%\",   block_close = \"%}\",   variable_open = \"{{\",   variable_close = \"}}\",   comment_open = \"{#\",   comment_close = \"#}\",   line_statement = NULL,   trim_blocks = FALSE,   lstrip_blocks = FALSE,   ignore_missing_files = FALSE )  default_config()"},{"path":"https://davidchall.github.io/jinjar/reference/jinjar_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure the templating engine — jinjar_config","text":"loader engine discovers templates. Choices: NULL (default), disables search templates. Path template directory. loader object. block_open, block_close opening closing delimiters control blocks. Default: \"{%\" \"%}\". variable_open, variable_close opening closing delimiters print statements. Default: \"{{\" \"}}\". comment_open, comment_close opening closing delimiters comments. Default: \"{#\" \"#}\". line_statement prefix inline statement. NULL (default), inline statements disabled. trim_blocks Remove first newline block. Default: FALSE. lstrip_blocks Remove inline whitespace block. Default: FALSE. ignore_missing_files Ignore include extends statements auxiliary template found. FALSE (default), error raised.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/jinjar_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure the templating engine — jinjar_config","text":"\"jinjar_config\" object.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/jinjar_config.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Configure the templating engine — jinjar_config","text":"equivalent Jinja class Environment, term special significance R (see environment()).","code":""},{"path":"https://davidchall.github.io/jinjar/reference/jinjar_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure the templating engine — jinjar_config","text":"","code":"jinjar_config() #>  #> ── Template configuration ────────────────────────────────────────────────────── #> Loader: disabled #> Syntax: {% block %} {{ variable }} {# comment #}"},{"path":"https://davidchall.github.io/jinjar/reference/loader.html","id":null,"dir":"Reference","previous_headings":"","what":"Template loaders — loader","title":"Template loaders — loader","text":"Loaders responsible exposing templates templating engine. path_loader() loads templates directory file system. package_loader() loads templates directory R package. list_loader() loads templates named list.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/loader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template loaders — loader","text":"","code":"path_loader(...)  package_loader(package, ...)  list_loader(x)"},{"path":"https://davidchall.github.io/jinjar/reference/loader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template loaders — loader","text":"... Strings specifying path components. package Name package search. x Named list mapping template names template sources.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/loader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template loaders — loader","text":"\"jinjar_loader\" object.","code":""},{"path":[]},{"path":"https://davidchall.github.io/jinjar/reference/loader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template loaders — loader","text":"","code":"path_loader(getwd()) #> Loader: /home/runner/work/jinjar/jinjar/docs/reference  package_loader(\"base\", \"demo\") #> Loader: {base}/demo  list_loader(list(   header = \"Title: {{ title }}\",   content = \"Hello {{ person }}!\" )) #> Loader: \"header\" and \"content\""},{"path":"https://davidchall.github.io/jinjar/reference/parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a template — parse","title":"Parse a template — parse","text":"Sometimes want render multiple copies template, using different sets data variables. parse_template() returns intermediate version template, can render() repeatedly without re-parsing template syntax.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a template — parse","text":"","code":"parse_template(.x, .config)  # S3 method for character parse_template(.x, .config = default_config())  # S3 method for fs_path parse_template(.x, .config = default_config())"},{"path":"https://davidchall.github.io/jinjar/reference/parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a template — parse","text":".x template. Choices: template string. path template file (use fs::path()). .config engine configuration. default matches Jinja defaults, can use jinjar_config() customize things like syntax delimiters, whitespace control, loading auxiliary templates.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a template — parse","text":"\"jinjar_template\" object.","code":""},{"path":[]},{"path":"https://davidchall.github.io/jinjar/reference/parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a template — parse","text":"","code":"x <- parse_template(\"Hello {{ name }}!\")  render(x, name = \"world\") #> [1] \"Hello world!\""},{"path":"https://davidchall.github.io/jinjar/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a template — print.jinjar_template","title":"Print a template — print.jinjar_template","text":"template parsed, can printed color highlighting templating blocks.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a template — print.jinjar_template","text":"","code":"# S3 method for jinjar_template print(x, ..., n = 10)"},{"path":"https://davidchall.github.io/jinjar/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a template — print.jinjar_template","text":"x parsed template (use parse_template()). ... dots future extensions must empty. n Number lines show. Inf, print lines. Default: 10.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a template — print.jinjar_template","text":"","code":"input <- '<!DOCTYPE html> <html lang=\"en\"> <head>     <title>{{ title }}<\/title> <\/head> <body>     <ul id=\"navigation\">     {% for item in navigation -%}         <li><a href=\"{{ item.href }}\">{{ item.caption }}<\/a><\/li>     {% endfor -%}     <\/ul> {# a comment #} <\/body> <\/html>'  x <- parse_template(input)  print(x) #> <!DOCTYPE html> #> <html lang=\"en\"> #> <head> #>     <title>{{ title }}<\/title> #> <\/head> #> <body> #>     <ul id=\"navigation\"> #>     {% for item in navigation -%} #>         <li><a href=\"{{ item.href }}\">{{ item.caption }}<\/a><\/li> #>     {% endfor -%} #> ℹ … with 4 more lines  print(x, n = Inf) #> <!DOCTYPE html> #> <html lang=\"en\"> #> <head> #>     <title>{{ title }}<\/title> #> <\/head> #> <body> #>     <ul id=\"navigation\"> #>     {% for item in navigation -%} #>         <li><a href=\"{{ item.href }}\">{{ item.caption }}<\/a><\/li> #>     {% endfor -%} #>     <\/ul> #> {# a comment #} #> <\/body> #> <\/html>"},{"path":"https://davidchall.github.io/jinjar/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a template — render","title":"Render a template — render","text":"Data passed template render final document.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a template — render","text":"","code":"render(.x, ...)  # S3 method for character render(.x, ..., .config = default_config())  # S3 method for fs_path render(.x, ..., .config = default_config())  # S3 method for jinjar_template render(.x, ...)"},{"path":"https://davidchall.github.io/jinjar/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a template — render","text":".x template. Choices: template string. path template file (use fs::path()). parsed template (use parse_template()). ... <dynamic-dots> Data passed template. default, length-1 vector passed scalar variable. Use () declare vector passed array variable. preserves length-1 vector array. .config engine configuration. default matches Jinja defaults, can use jinjar_config() customize things like syntax delimiters, whitespace control, loading auxiliary templates.","code":""},{"path":"https://davidchall.github.io/jinjar/reference/render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a template — render","text":"String containing rendered template.","code":""},{"path":[]},{"path":"https://davidchall.github.io/jinjar/reference/render.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a template — render","text":"","code":"# pass data as arguments render(\"Hello {{ name }}!\", name = \"world\") #> [1] \"Hello world!\"  # pass length-1 vector as array render(\"Hello {{ name.0 }}!\", name = I(\"world\")) #> [1] \"Hello world!\"  # pass data programmatically params <- list(name = \"world\") render(\"Hello {{ name }}!\", !!!params) #> [1] \"Hello world!\"  # render template file if (FALSE) { render(fs::path(\"template.txt\"), name = \"world\") }"},{"path":"https://davidchall.github.io/jinjar/news/index.html","id":"jinjar-development-version","dir":"Changelog","previous_headings":"","what":"jinjar (development version)","title":"jinjar (development version)","text":"Fixed issue disabling line statement raise error template parsing. Since line statements disabled default, error encountered quite easily (#31). quote_sql() now escapes single-quotes using additional single-quote (#30). Fixed edge case error messages formatted (#32).","code":""},{"path":"https://davidchall.github.io/jinjar/news/index.html","id":"jinjar-030","dir":"Changelog","previous_headings":"","what":"jinjar 0.3.0","title":"jinjar 0.3.0","text":"CRAN release: 2022-07-23 release provides several quality--life improvements. Variables green Control blocks blue Comments italic grey print.jinjar_template() gains n argument control number lines displayed (#18). jinjar_config() objects now printed using {cli} (#22). Exceptions raised C++ code now converted R errors (#20).","code":""},{"path":"https://davidchall.github.io/jinjar/news/index.html","id":"jinjar-020","dir":"Changelog","previous_headings":"","what":"jinjar 0.2.0","title":"jinjar 0.2.0","text":"CRAN release: 2022-06-25 New parse_template() parse template render() multiple times (#13). New template function quote_sql() simplifies writing SQL queries. See vignette(\"template-syntax\") details (#14).","code":""},{"path":"https://davidchall.github.io/jinjar/news/index.html","id":"jinjar-011","dir":"Changelog","previous_headings":"","what":"jinjar 0.1.1","title":"jinjar 0.1.1","text":"CRAN release: 2022-05-01 path_loader() now correctly finds template files outside working directory (#11).","code":""},{"path":"https://davidchall.github.io/jinjar/news/index.html","id":"jinjar-010","dir":"Changelog","previous_headings":"","what":"jinjar 0.1.0","title":"jinjar 0.1.0","text":"CRAN release: 2021-10-28 Initial version CRAN.","code":""}]
