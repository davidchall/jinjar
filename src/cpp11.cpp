// Generated by cpp11: do not edit by hand
// clang-format off

#include "jinjar_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// render.cpp
cpp11::external_pointer<jinjar::Template> parse_(const cpp11::strings& input, const cpp11::list& config);
extern "C" SEXP _jinjar_parse_(SEXP input, SEXP config) {
  BEGIN_CPP11
    return cpp11::as_sexp(parse_(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(input), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(config)));
  END_CPP11
}
// render.cpp
cpp11::strings render_(cpp11::external_pointer<jinjar::Template> input, const cpp11::strings& data_json);
extern "C" SEXP _jinjar_render_(SEXP input, SEXP data_json) {
  BEGIN_CPP11
    return cpp11::as_sexp(render_(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<jinjar::Template>>>(input), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(data_json)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_jinjar_parse_",  (DL_FUNC) &_jinjar_parse_,  2},
    {"_jinjar_render_", (DL_FUNC) &_jinjar_render_, 2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_jinjar(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
